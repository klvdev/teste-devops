name: Build

on:
  push:
    branches:
      - dev
      - hml
      - main

permissions:
  contents: write

jobs:
  create-tag:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Git
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Check if .version file exists
      id: check_version_file
      run: |
        if [ -f .version ]; then
          echo "Version file found."
        else
          echo "Error: .version file not found"
          exit 1
        fi

    - name: Get current version from .version file
      id: get_version
      run: |
        version=$(cat .version)
        echo "::set-output name=version::$version"

    - name: Determine environment suffix
      id: set_env_suffix
      run: |
        if [[ $GITHUB_REF == refs/heads/dev ]]; then
          echo "::set-output name=env_suffix::dev"
        elif [[ $GITHUB_REF == refs/heads/hml ]]; then
          echo "::set-output name=env_suffix::hml"
        else
          echo "::set-output name=env_suffix::prd"
        fi

    - name: Create a new version with environment suffix
      id: create_version
      run: |
        version=${{ steps.get_version.outputs.version }}
        env_suffix=${{ steps.set_env_suffix.outputs.env_suffix }}
        
        if [[ $env_suffix != "prd" ]]; then
          # Get the latest tag for the same base version
          latest_tag=$(git tag --list "${version}-${env_suffix}.*" --sort=-v:refname | head -n 1)
          if [[ -z $latest_tag ]]; then
            new_version="${version}-${env_suffix}.1"
          else
            # Increment the number
            base="${latest_tag%-*}"
            number="${latest_tag##*.}"
            new_version="${base}.$((number + 1))"
          fi
        else
          # For production, just use the version from .version file
          new_version="$version"
        fi

        echo "::set-output name=new_version::$new_version"

    - name: Create and push tag
      run: |
        new_version=${{ steps.create_version.outputs.new_version }}
        git tag $new_version
        git push origin $new_version
